{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { dateFormat, dateGranularity } from './date_format';\nimport { isDateValue } from './date_value';\nimport { isArray, isBoolean, isNumber, isString, isDateLike, isNil } from '../../../services/predicate';\nimport moment from 'moment';\nvar utc = moment.utc;\n\nvar resolveValueAsDate = function resolveValueAsDate(value) {\n  if (moment.isMoment(value)) {\n    return value;\n  }\n\n  if (moment.isDate(value) || isNumber(value)) {\n    return moment(value);\n  }\n\n  return dateFormat.parse(value.toString());\n};\n\nvar defaultEqOptions = {\n  ignoreCase: true\n};\nexport var eq = function eq(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  options = _objectSpread({}, defaultEqOptions, options);\n\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  if (isDateValue(clauseValue)) {\n    var dateFieldValue = resolveValueAsDate(fieldValue);\n\n    if (clauseValue.granularity) {\n      return clauseValue.granularity.isSame(dateFieldValue, clauseValue.resolve());\n    }\n\n    return dateFieldValue.isSame(clauseValue.resolve());\n  }\n\n  if (isString(fieldValue)) {\n    if (options.exactMatch === true) {\n      return options.ignoreCase ? fieldValue.toLowerCase() === clauseValue.toString().toLowerCase() : fieldValue === clauseValue.toString();\n    } else {\n      return options.ignoreCase ? fieldValue.toLowerCase().includes(clauseValue.toString().toLowerCase()) : fieldValue.includes(clauseValue.toString());\n    }\n  }\n\n  if (isNumber(fieldValue)) {\n    clauseValue = Number(clauseValue);\n    return fieldValue === clauseValue;\n  }\n\n  if (isBoolean(fieldValue)) {\n    return clauseValue === fieldValue;\n  }\n\n  if (isDateLike(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n\n    if (!date.isValid()) {\n      return false;\n    }\n\n    var granularity = dateGranularity(date);\n\n    if (!granularity) {\n      return utc(fieldValue).isSame(date);\n    }\n\n    return granularity.isSame(fieldValue, date);\n  }\n\n  if (isArray(fieldValue)) {\n    if (fieldValue.length > 0) {\n      return fieldValue.some(function (item) {\n        return eq(item, clauseValue, options);\n      });\n    } else {\n      return eq('', clauseValue, options);\n    }\n  }\n\n  return false; // unknown value type\n};\nexport var exact = function exact(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return eq(fieldValue, clauseValue, _objectSpread({}, options, {\n    exactMatch: true\n  }));\n};\n\nvar greaterThen = function greaterThen(fieldValue, clauseValue) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (isDateValue(clauseValue)) {\n    var clauseDateValue = clauseValue.resolve();\n\n    if (!clauseValue.granularity) {\n      return inclusive ? utc(fieldValue).isSameOrAfter(clauseDateValue) : utc(fieldValue).isAfter(clauseDateValue);\n    }\n\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(clauseValue.granularity.start(clauseDateValue));\n    }\n\n    return utc(fieldValue).isSameOrAfter(clauseValue.granularity.startOfNext(clauseDateValue));\n  }\n\n  if (isString(fieldValue)) {\n    var str = clauseValue.toString();\n    return inclusive ? fieldValue >= str : fieldValue > str;\n  }\n\n  if (isNumber(fieldValue)) {\n    var number = Number(clauseValue);\n    return inclusive ? fieldValue >= number : fieldValue > number;\n  }\n\n  if (isDateLike(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n    var granularity = dateGranularity(date);\n\n    if (!granularity) {\n      return inclusive ? utc(fieldValue).isSameOrAfter(date) : utc(fieldValue).isAfter(date);\n    }\n\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(granularity.start(date));\n    }\n\n    return utc(fieldValue).isSameOrAfter(granularity.startOfNext(date));\n  }\n\n  if (isArray(fieldValue)) {\n    return fieldValue.all(function (item) {\n      return greaterThen(item, clauseValue, inclusive);\n    });\n  }\n\n  return false; // unsupported value type\n};\n\nexport var gt = function gt(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n\n  return greaterThen(fieldValue, clauseValue);\n};\nexport var gte = function gte(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return greaterThen(fieldValue, clauseValue, true);\n};\nexport var lt = function lt(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n\n  return !greaterThen(fieldValue, clauseValue, true);\n};\nexport var lte = function lte(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return !greaterThen(fieldValue, clauseValue);\n};","map":{"version":3,"sources":["/Users/timothybowen/Documents/Development/social-one/node_modules/@elastic/eui/es/components/search_bar/query/operators.js"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","dateFormat","dateGranularity","isDateValue","isArray","isBoolean","isNumber","isString","isDateLike","isNil","moment","utc","resolveValueAsDate","isMoment","isDate","parse","toString","defaultEqOptions","ignoreCase","eq","fieldValue","clauseValue","options","undefined","dateFieldValue","granularity","isSame","resolve","exactMatch","toLowerCase","includes","Number","date","isValid","some","item","exact","greaterThen","inclusive","clauseDateValue","isSameOrAfter","isAfter","start","startOfNext","str","number","all","gt","gte","lt","lte"],"mappings":"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","sourcesContent":["function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { dateFormat, dateGranularity } from './date_format';\nimport { isDateValue } from './date_value';\nimport { isArray, isBoolean, isNumber, isString, isDateLike, isNil } from '../../../services/predicate';\nimport moment from 'moment';\nvar utc = moment.utc;\n\nvar resolveValueAsDate = function resolveValueAsDate(value) {\n  if (moment.isMoment(value)) {\n    return value;\n  }\n\n  if (moment.isDate(value) || isNumber(value)) {\n    return moment(value);\n  }\n\n  return dateFormat.parse(value.toString());\n};\n\nvar defaultEqOptions = {\n  ignoreCase: true\n};\nexport var eq = function eq(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  options = _objectSpread({}, defaultEqOptions, options);\n\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  if (isDateValue(clauseValue)) {\n    var dateFieldValue = resolveValueAsDate(fieldValue);\n\n    if (clauseValue.granularity) {\n      return clauseValue.granularity.isSame(dateFieldValue, clauseValue.resolve());\n    }\n\n    return dateFieldValue.isSame(clauseValue.resolve());\n  }\n\n  if (isString(fieldValue)) {\n    if (options.exactMatch === true) {\n      return options.ignoreCase ? fieldValue.toLowerCase() === clauseValue.toString().toLowerCase() : fieldValue === clauseValue.toString();\n    } else {\n      return options.ignoreCase ? fieldValue.toLowerCase().includes(clauseValue.toString().toLowerCase()) : fieldValue.includes(clauseValue.toString());\n    }\n  }\n\n  if (isNumber(fieldValue)) {\n    clauseValue = Number(clauseValue);\n    return fieldValue === clauseValue;\n  }\n\n  if (isBoolean(fieldValue)) {\n    return clauseValue === fieldValue;\n  }\n\n  if (isDateLike(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n\n    if (!date.isValid()) {\n      return false;\n    }\n\n    var granularity = dateGranularity(date);\n\n    if (!granularity) {\n      return utc(fieldValue).isSame(date);\n    }\n\n    return granularity.isSame(fieldValue, date);\n  }\n\n  if (isArray(fieldValue)) {\n    if (fieldValue.length > 0) {\n      return fieldValue.some(function (item) {\n        return eq(item, clauseValue, options);\n      });\n    } else {\n      return eq('', clauseValue, options);\n    }\n  }\n\n  return false; // unknown value type\n};\nexport var exact = function exact(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return eq(fieldValue, clauseValue, _objectSpread({}, options, {\n    exactMatch: true\n  }));\n};\n\nvar greaterThen = function greaterThen(fieldValue, clauseValue) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (isDateValue(clauseValue)) {\n    var clauseDateValue = clauseValue.resolve();\n\n    if (!clauseValue.granularity) {\n      return inclusive ? utc(fieldValue).isSameOrAfter(clauseDateValue) : utc(fieldValue).isAfter(clauseDateValue);\n    }\n\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(clauseValue.granularity.start(clauseDateValue));\n    }\n\n    return utc(fieldValue).isSameOrAfter(clauseValue.granularity.startOfNext(clauseDateValue));\n  }\n\n  if (isString(fieldValue)) {\n    var str = clauseValue.toString();\n    return inclusive ? fieldValue >= str : fieldValue > str;\n  }\n\n  if (isNumber(fieldValue)) {\n    var number = Number(clauseValue);\n    return inclusive ? fieldValue >= number : fieldValue > number;\n  }\n\n  if (isDateLike(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n    var granularity = dateGranularity(date);\n\n    if (!granularity) {\n      return inclusive ? utc(fieldValue).isSameOrAfter(date) : utc(fieldValue).isAfter(date);\n    }\n\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(granularity.start(date));\n    }\n\n    return utc(fieldValue).isSameOrAfter(granularity.startOfNext(date));\n  }\n\n  if (isArray(fieldValue)) {\n    return fieldValue.all(function (item) {\n      return greaterThen(item, clauseValue, inclusive);\n    });\n  }\n\n  return false; // unsupported value type\n};\n\nexport var gt = function gt(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n\n  return greaterThen(fieldValue, clauseValue);\n};\nexport var gte = function gte(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return greaterThen(fieldValue, clauseValue, true);\n};\nexport var lt = function lt(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n\n  return !greaterThen(fieldValue, clauseValue, true);\n};\nexport var lte = function lte(fieldValue, clauseValue) {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return !greaterThen(fieldValue, clauseValue);\n};"]},"metadata":{},"sourceType":"module"}
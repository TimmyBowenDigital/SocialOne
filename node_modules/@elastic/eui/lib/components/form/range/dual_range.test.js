"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _required_props = require("../../../test/required_props");

var _dual_range = require("./dual_range");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

jest.mock('../form_row/make_id', function () {
  return function () {
    return 'generated-id';
  };
});
var props = {
  onChange: function onChange() {}
};
describe('EuiDualRange', function () {
  test('is rendered', function () {
    var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({
      name: "name",
      id: "id",
      value: ['1', '8']
    }, props, _required_props.requiredProps)));
    expect(component).toMatchSnapshot();
  });
  describe('props', function () {
    test('disabled should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({}, props, {
        value: ['1', '8'],
        disabled: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('fullWidth should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({}, props, {
        value: ['1', '8'],
        fullWidth: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('compressed should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({}, props, {
        value: ['1', '8'],
        compressed: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('labels should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({}, props, {
        value: ['1', '8'],
        showLabels: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('ticks should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({}, props, {
        value: ['1', '8'],
        showTicks: true,
        tickInterval: 20
      })));
      expect(component).toMatchSnapshot();
    });
    test('custom ticks should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({}, props, {
        value: [20, 100],
        showTicks: true,
        ticks: [{
          label: '20kb',
          value: 20
        }, {
          label: '100kb',
          value: 100
        }]
      })));
      expect(component).toMatchSnapshot();
    });
    test('range should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({}, props, {
        showRange: true,
        value: [1, 8]
      })));
      expect(component).toMatchSnapshot();
    });
    test('inputs should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({
        name: "name",
        id: "id",
        value: ['1', '8'],
        showInput: true
      }, props, _required_props.requiredProps)));
      expect(component).toMatchSnapshot();
    });
    test('slider should display in popover', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({
        name: "name",
        id: "id",
        value: ['1', '8'],
        showInput: "inputWithPopover"
      }, props, _required_props.requiredProps)));
      expect(component).toMatchSnapshot();
    });
    test('levels should render', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, {
        levels: [{
          min: 0,
          max: 20,
          color: 'danger'
        }, {
          min: 20,
          max: 100,
          color: 'success'
        }],
        value: ['1', '8'],
        onChange: function onChange() {}
      }));
      expect(component).toMatchSnapshot();
    });
  });
  test('allows value prop to accept numbers', function () {
    var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({
      value: [1, 8]
    }, props)));
    expect(component).toMatchSnapshot();
  });
  test('allows value prop to accept empty strings', function () {
    var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, _extends({
      value: ['', '']
    }, props)));
    expect(component).toMatchSnapshot();
  });
  describe('input props', function () {
    test('can be applied to min and max inputs', function () {
      var component = (0, _enzyme.render)(_react.default.createElement(_dual_range.EuiDualRange, {
        name: "name",
        id: "id",
        min: 1,
        max: 10,
        value: ['1', '8'],
        onChange: function onChange() {},
        showInput: true,
        minInputProps: {
          'aria-label': 'Min value'
        },
        maxInputProps: {
          'aria-label': 'Max value'
        }
      }));
      expect(component).toMatchSnapshot();
    });
  });
});
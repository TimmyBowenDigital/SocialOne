function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import { mount } from 'enzyme';
import { useDependentState } from './useDependentState';
describe('useDependentState', function () {
  it('sets the base state', function () {
    // this is a huge abuse of closure scope
    // but allows for jest's built in mock expect'ing
    var sourceValue = 2;
    var doubler = jest.fn(function () {
      return sourceValue * 2;
    });

    function Foo() {
      var _useDependentState = useDependentState(doubler, [sourceValue]),
          _useDependentState2 = _slicedToArray(_useDependentState, 1),
          value = _useDependentState2[0];

      return React.createElement("div", null, value);
    } // mount the component verify the state function was called with no previous state value


    var component = mount(React.createElement(Foo, null));
    expect(doubler).toHaveBeenCalledTimes(1);
    expect(doubler).toHaveBeenCalledWith();
    expect(component.text()).toBe('4'); // 2 * 2

    doubler.mockClear(); // update the source value, force a re-render, and run checks

    sourceValue = 4;
    component.setProps({});
    expect(doubler).toHaveBeenCalledTimes(1);
    expect(doubler).toHaveBeenCalledWith(4); // check previous state value

    expect(component.text()).toBe('8'); // new value should be 4 * 2
  });
});
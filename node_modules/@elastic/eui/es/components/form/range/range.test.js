function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { render } from 'enzyme';
import { requiredProps } from '../../../test/required_props';
import { EuiRange } from './range';
jest.mock('../form_row/make_id', function () {
  return function () {
    return 'generated-id';
  };
});
var props = {
  value: '8'
};
describe('EuiRange', function () {
  test('is rendered', function () {
    var component = render(React.createElement(EuiRange, _extends({
      name: "name",
      id: "id",
      onChange: function onChange() {}
    }, props, requiredProps)));
    expect(component).toMatchSnapshot();
  });
  describe('props', function () {
    test('disabled should render', function () {
      var component = render(React.createElement(EuiRange, _extends({}, props, {
        disabled: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('fullWidth should render', function () {
      var component = render(React.createElement(EuiRange, _extends({}, props, {
        fullWidth: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('compressed should render', function () {
      var component = render(React.createElement(EuiRange, _extends({}, props, {
        compressed: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('labels should render', function () {
      var component = render(React.createElement(EuiRange, _extends({}, props, {
        showLabels: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('ticks should render', function () {
      var component = render(React.createElement(EuiRange, _extends({}, props, {
        showTicks: true,
        tickInterval: 20
      })));
      expect(component).toMatchSnapshot();
    });
    test('custom ticks should render', function () {
      var component = render(React.createElement(EuiRange, _extends({}, props, {
        showTicks: true,
        ticks: [{
          label: '20kb',
          value: 20
        }, {
          label: '100kb',
          value: 100
        }]
      })));
      expect(component).toMatchSnapshot();
    });
    test('range should render', function () {
      var component = render(React.createElement(EuiRange, _extends({}, props, {
        showRange: true
      })));
      expect(component).toMatchSnapshot();
    });
    test('value should render', function () {
      var value = props.value,
          localProps = _objectWithoutProperties(props, ["value"]);

      var component = render(React.createElement(EuiRange, _extends({
        value: "200",
        showValue: true,
        valuePrepend: "before",
        valueAppend: "after"
      }, localProps)));
      expect(component).toMatchSnapshot();
    });
    test('input should render', function () {
      var component = render(React.createElement(EuiRange, _extends({
        name: "name",
        id: "id",
        onChange: function onChange() {},
        showInput: true
      }, props, requiredProps)));
      expect(component).toMatchSnapshot();
    });
    test('slider should display in popover', function () {
      var component = render(React.createElement(EuiRange, _extends({
        name: "name",
        id: "id",
        onChange: function onChange() {},
        showInput: "inputWithPopover"
      }, props, requiredProps)));
      expect(component).toMatchSnapshot();
    });
    test('levels should render', function () {
      var component = render(React.createElement(EuiRange, {
        levels: [{
          min: 0,
          max: 20,
          color: 'danger'
        }, {
          min: 20,
          max: 100,
          color: 'success'
        }],
        value: 20
      }));
      expect(component).toMatchSnapshot();
    });
  });
  test('allows value prop to accept a number', function () {
    var value = props.value,
        localProps = _objectWithoutProperties(props, ["value"]);

    var component = render(React.createElement(EuiRange, _extends({
      value: 8,
      onChange: function onChange() {},
      showValue: true
    }, localProps)));
    expect(component).toMatchSnapshot();
  });
  test('allows value prop to accept empty string', function () {
    var value = props.value,
        localProps = _objectWithoutProperties(props, ["value"]);

    var component = render(React.createElement(EuiRange, _extends({
      value: '',
      onChange: function onChange() {}
    }, localProps)));
    expect(component).toMatchSnapshot();
  });
});
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { render } from 'enzyme';
import { requiredProps } from '../../../test/required_props';
import { EuiFieldPassword } from './field_password';
jest.mock('../form_control_layout', function () {
  return {
    EuiFormControlLayout: 'eui-form-control-layout'
  };
});
jest.mock('../validatable_control', function () {
  return {
    EuiValidatableControl: 'eui-validatable-control'
  };
});
describe('EuiFieldPassword', function () {
  test('is rendered', function () {
    var component = render(React.createElement(EuiFieldPassword, _extends({
      name: "elastic",
      id: "1",
      placeholder: "Placeholder",
      value: "1",
      onChange: function onChange() {}
    }, requiredProps)));
    expect(component).toMatchSnapshot();
  });
  describe('props', function () {
    test('isInvalid is rendered', function () {
      var component = render(React.createElement(EuiFieldPassword, {
        isInvalid: true
      }));
      expect(component).toMatchSnapshot();
    });
    test('fullWidth is rendered', function () {
      var component = render(React.createElement(EuiFieldPassword, {
        fullWidth: true
      }));
      expect(component).toMatchSnapshot();
    });
    test('isLoading is rendered', function () {
      var component = render(React.createElement(EuiFieldPassword, {
        isLoading: true
      }));
      expect(component).toMatchSnapshot();
    });
  });
});
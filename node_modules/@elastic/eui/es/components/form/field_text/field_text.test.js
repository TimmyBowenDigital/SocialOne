function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { render } from 'enzyme';
import { requiredProps } from '../../../test/required_props';
import { EuiFieldText } from './field_text';
jest.mock('../form_control_layout', function () {
  var formControlLayout = require.requireActual('../form_control_layout');

  return _objectSpread({}, formControlLayout, {
    EuiFormControlLayout: 'eui-form-control-layout'
  });
});
jest.mock('../validatable_control', function () {
  return {
    EuiValidatableControl: 'eui-validatable-control'
  };
});
describe('EuiFieldText', function () {
  test('is rendered', function () {
    var component = render(React.createElement(EuiFieldText, _extends({
      name: "elastic",
      id: "1",
      placeholder: "Placeholder",
      value: "1",
      icon: "foo",
      inputRef: function inputRef() {},
      onChange: function onChange() {}
    }, requiredProps)));
    expect(component).toMatchSnapshot();
  });
  describe('props', function () {
    test('isInvalid is rendered', function () {
      var component = render(React.createElement(EuiFieldText, {
        isInvalid: true
      }));
      expect(component).toMatchSnapshot();
    });
    test('fullWidth is rendered', function () {
      var component = render(React.createElement(EuiFieldText, {
        fullWidth: true
      }));
      expect(component).toMatchSnapshot();
    });
    test('readOnly is rendered', function () {
      var component = render(React.createElement(EuiFieldText, {
        readOnly: true
      }));
      expect(component).toMatchSnapshot();
    });
    test('isLoading is rendered', function () {
      var component = render(React.createElement(EuiFieldText, {
        isLoading: true
      }));
      expect(component).toMatchSnapshot();
    });
    test('controlOnly is rendered', function () {
      var component = render(React.createElement(EuiFieldText, {
        controlOnly: true
      }));
      expect(component).toMatchSnapshot();
    });
  });
});
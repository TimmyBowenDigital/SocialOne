import React from 'react';
import { mount } from 'enzyme';
import { requiredProps, takeMountedSnapshot } from '../../test';
import { EuiErrorBoundary } from './error_boundary';

var GoodComponent = function GoodComponent() {
  return React.createElement("div", null, "No error");
};

var errorMessage = "I'm here to kick butt and chew bubblegum.\n\nAnd I'm all out of gum.";

var BadComponent = function BadComponent() {
  throw new Error(errorMessage);
};

describe('EuiErrorBoundary', function () {
  test('is rendered without an error', function () {
    var component = takeMountedSnapshot(mount(React.createElement(EuiErrorBoundary, requiredProps, React.createElement(GoodComponent, null))));
    expect(component).toMatchSnapshot();
  });
  test('is rendered with an error', function () {
    // Prevent the React boundary error from appearing in the terminal.
    spyOn(console, 'error'); // eslint-disable-line no-undef
    // Because the error contains the stack trace, it's non-deterministic. So we'll just check that
    // it contains our error message.

    var errorText = mount(React.createElement(EuiErrorBoundary, requiredProps, React.createElement(BadComponent, null))).text();
    expect(errorText).toContain(errorMessage);
  });
});
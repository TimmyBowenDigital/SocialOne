function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { render } from 'enzyme';
import { requiredProps } from '../../test/required_props';
import { EuiSuggestItem } from './suggest_item';
var TYPE = {
  iconType: 'search',
  color: 'tint1'
};
describe('EuiSuggestItem', function () {
  test('is rendered', function () {
    var component = render(React.createElement(EuiSuggestItem, _extends({}, requiredProps, {
      label: "Test label",
      type: TYPE
    })));
    expect(component).toMatchSnapshot();
  });
});
describe('props', function () {
  var sampleItem = {
    type: {
      iconType: 'kqlValue',
      color: 'tint2'
    },
    label: 'Charles de Gaulle International Airport',
    description: 'This is the description'
  };
  describe('labelDisplay as expand', function () {
    test('is rendered', function () {
      var component = render(React.createElement(EuiSuggestItem, {
        type: sampleItem.type,
        description: sampleItem.description,
        label: sampleItem.description,
        labelDisplay: "expand"
      }));
      expect(component).toMatchSnapshot();
    });
  });
  describe('item with no description has expanded label', function () {
    test('is rendered', function () {
      var component = render(React.createElement(EuiSuggestItem, {
        label: sampleItem.description,
        type: sampleItem.type
      }));
      expect(component).toMatchSnapshot();
    });
  });
});